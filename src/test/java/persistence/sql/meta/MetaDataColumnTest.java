package persistence.sql.meta;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import persistence.dialect.h2.H2Dialect;
import persistence.meta.MetaDataColumn;
import persistence.sql.fixture.PersonFixture;

import java.lang.reflect.Field;
import java.lang.reflect.Type;


import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertAll;

@DisplayName("1.2 MetaDataColumn을 Clazz에서 추출합니다.")
public class MetaDataColumnTest {
  private static Class<PersonFixture> person;
  private static H2Dialect h2Dialect;
  final private String id = "id";
  final private String name = "name";
  final private String age = "age";
  final private String email = "email";
  @BeforeAll
  static void setup() {
    person = PersonFixture.class;
    h2Dialect = new H2Dialect();
  }
  @Test
  @DisplayName("1.2.1 @Id 애노테이션 Column 을 생성한다.")
  public void createWithIdAnnotation() {
    Field idField = person.getDeclaredField(id);
    Type type = h2Dialect.convert(idField);
    MetaDataColumn column = MetaDataColumn.of(idField, type);

    assertAll( {
      () -> assertThat(column.getColumnName()).isEqualTo("id");
      () -> assertThat(column.isIdAnnotationPresent()).isEqualTo(true);
    });

  }
  @Test
  @DisplayName("1.2.2 @Column 으로 Column 을 생성한다.")
  public void createWithoutColumnAnnotation() {

    Field emailField = person.getDeclaredField(email);
    Type emailType = h2Dialect.convert(emailField);

    MetaDataColumn emailColumn = MetaDataColumn.of(emailField, emailType);

    assertAll( {
      () -> assertThat(emailColumn.getColumnName()).isEqualTo("email");
      () -> assertThat(emailColumn.isColumnAnnotationPresent()).isEqualTo(true);
    });

  }

  @Test
  @DisplayName("1.2.2 @Column 애노테이션의 name 값으로 Column 을 생성한다.")
  public void createWithNameValueinColumnAnnotation() {
    Field nameField = person.getDeclaredField(name);
    Field ageField = person.getDeclaredField(age);
    Type idType = h2Dialect.convert(nameField);
    Type ageType = h2Dialect.convert(ageField);

    MetaDataColumn nameColumn = MetaDataColumn.of(nameField, idType);
    MetaDataColumn ageColumn = MetaDataColumn.of(ageField, ageType);

    assertAll( {
            () -> assertThat(nameColumn.getColumnName()).isEqualTo("nick_name");
    () -> assertThat(nameColumn.isColumnAnnotationPresent()).isEqualTo(true);
    () -> assertThat(ageColumn.getColumnName()).isEqualTo("old");
    () -> assertThat(ageColumn.isColumnAnnotationPresent()).isEqualTo(true);
    () -> assertThat(emailColumn.getColumnName()).isEqualTo("email");
    () -> assertThat(emailColumn.isColumnAnnotationPresent()).isEqualTo(true);
    });
  }

  @Test
  @DisplayName("1.2.2 @Column 애노테이션의 nullable 값으로 Column 을 생성한다.")
  public void createWithNullableColumnAnnotation() {
    Field emailField = person.getDeclaredField(email);
    Type emailType = h2Dialect.convert(emailField);

    MetaDataColumn emailColumn = MetaDataColumn.of(emailField, emailType);

    assertAll( {
      () -> assertThat(emailColumn.getColumnName()).isEqualTo("email");
      () -> assertThat(emailColumn.isColumnAnnotationPresent()).isEqualTo(true);
      () -> assertThat(emailColumn.getColumnClause()).isEqualTo("email varchar NOT NULL");
    });
  }

  @Test
  @DisplayName("1.2.2 @GeneratedValue 애노테이션의 값으로 Column 을 생성한다.")
  public void createWithGeneratedValueAnnotation() {
    Field idField = person.getDeclaredField(id);
    Type type = h2Dialect.convert(idField);
    MetaDataColumn column = MetaDataColumn.of(idField, type);

    assertAll( {
      () -> assertThat(column.getColumnName()).isEqualTo("id");
      () -> assertThat(column.isIdAnnotationPresent()).isEqualTo(true);
      () -> assertThat(column.getColumnClause()).isEqualTo("id bigint generated by default as identity");
    });
  }
}
